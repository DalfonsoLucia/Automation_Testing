{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jwt.service\";\nexport class TokenInterceptor {\n  constructor(jwtService) {\n    this.jwtService = jwtService;\n  }\n  intercept(req, next) {\n    const token = this.jwtService.getToken();\n    const request = req.clone({\n      setHeaders: {\n        ...(token ? {\n          Authorization: `Token ${token}`\n        } : {})\n      }\n    });\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.JwtService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,gBAAgB;EAC3BC,YAA6BC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAEtDC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACK,QAAQ,EAAE;IAExC,MAAMC,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;MACxBC,UAAU,EAAE;QACV,IAAIJ,KAAK,GAAG;UAAEK,aAAa,EAAE,SAASL,KAAK;QAAE,CAAE,GAAG,EAAE;;KAEvD,CAAC;IACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC;EAC7B;EAAC;qBAfUR,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAa,SAAhBb,gBAAgB;IAAAc,YADH;EAAM","names":["TokenInterceptor","constructor","jwtService","intercept","req","next","token","getToken","request","clone","setHeaders","Authorization","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\LuciaD'Alfonso\\Desktop\\Cypress\\angular-realworld-example-app-docker\\src\\app\\core\\interceptors\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n} from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { JwtService } from \"../services/jwt.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private readonly jwtService: JwtService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.jwtService.getToken();\r\n\r\n    const request = req.clone({\r\n      setHeaders: {\r\n        ...(token ? { Authorization: `Token ${token}` } : {}),\r\n      },\r\n    });\r\n    return next.handle(request);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}