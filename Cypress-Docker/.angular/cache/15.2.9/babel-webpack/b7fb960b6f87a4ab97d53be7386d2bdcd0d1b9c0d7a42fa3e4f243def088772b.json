{"ast":null,"code":"import { Validators, FormGroup, FormControl, ReactiveFormsModule } from \"@angular/forms\";\nimport { RouterLink } from \"@angular/router\";\nimport { NgIf } from \"@angular/common\";\nimport { ListErrorsComponent } from \"../../shared/list-errors.component\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = function () {\n  return [\"/login\"];\n};\nfunction AuthComponent_a_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Have an account?\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\nconst _c1 = function () {\n  return [\"/register\"];\n};\nfunction AuthComponent_a_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵtext(1, \"Need an account?\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c1));\n  }\n}\nfunction AuthComponent_input_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 15);\n  }\n}\nexport class AuthComponent {\n  constructor(route, router, userService) {\n    this.route = route;\n    this.router = router;\n    this.userService = userService;\n    this.authType = \"\";\n    this.title = \"\";\n    this.errors = {\n      errors: {}\n    };\n    this.isSubmitting = false;\n    this.destroy$ = new Subject();\n    // use FormBuilder to create a form group\n    this.authForm = new FormGroup({\n      email: new FormControl(\"\", {\n        validators: [Validators.required],\n        nonNullable: true\n      }),\n      password: new FormControl(\"\", {\n        validators: [Validators.required],\n        nonNullable: true\n      })\n    });\n  }\n  ngOnInit() {\n    this.authType = this.route.snapshot.url.at(-1).path;\n    this.title = this.authType === \"login\" ? \"Sign in\" : \"Sign up\";\n    if (this.authType === \"register\") {\n      this.authForm.addControl(\"username\", new FormControl(\"\", {\n        validators: [Validators.required],\n        nonNullable: true\n      }));\n    }\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  submitForm() {\n    this.isSubmitting = true;\n    this.errors = {\n      errors: {}\n    };\n    let observable = this.authType === \"login\" ? this.userService.login(this.authForm.value) : this.userService.register(this.authForm.value);\n    observable.pipe(takeUntil(this.destroy$)).subscribe({\n      next: () => void this.router.navigate([\"/\"]),\n      error: err => {\n        this.errors = err;\n        this.isSubmitting = false;\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AuthComponent_Factory(t) {\n    return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthComponent,\n    selectors: [[\"app-auth-page\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 20,\n    vars: 9,\n    consts: [[1, \"auth-page\"], [1, \"container\", \"page\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\", \"col-xs-12\"], [1, \"text-xs-center\"], [3, \"routerLink\", 4, \"ngIf\"], [3, \"errors\"], [3, \"formGroup\", \"ngSubmit\"], [3, \"disabled\"], [1, \"form-group\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"class\", \"form-control form-control-lg\", \"type\", \"text\", 4, \"ngIf\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"], [\"formControlName\", \"password\", \"placeholder\", \"Password\", \"type\", \"password\", 1, \"form-control\", \"form-control-lg\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-primary\", \"pull-xs-right\", 3, \"disabled\"], [3, \"routerLink\"], [\"formControlName\", \"username\", \"placeholder\", \"Username\", \"type\", \"text\", 1, \"form-control\", \"form-control-lg\"]],\n    template: function AuthComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h1\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\", 4);\n        i0.ɵɵtemplate(7, AuthComponent_a_7_Template, 2, 2, \"a\", 5);\n        i0.ɵɵtemplate(8, AuthComponent_a_8_Template, 2, 2, \"a\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"app-list-errors\", 6);\n        i0.ɵɵelementStart(10, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_Template_form_ngSubmit_10_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(11, \"fieldset\", 8)(12, \"fieldset\", 9);\n        i0.ɵɵtemplate(13, AuthComponent_input_13_Template, 1, 0, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"fieldset\", 9);\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"fieldset\", 9);\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 13);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd()()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType === \"register\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType === \"login\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"errors\", ctx.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.isSubmitting);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.authType === \"register\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", !ctx.authForm.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.title, \" \");\n      }\n    },\n    dependencies: [RouterLink, NgIf, ListErrorsComponent, ReactiveFormsModule, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","FormGroup","FormControl","ReactiveFormsModule","RouterLink","NgIf","ListErrorsComponent","takeUntil","Subject","i0","AuthComponent","constructor","route","router","userService","errors","authForm","email","validators","required","nonNullable","password","ngOnInit","authType","snapshot","url","at","path","title","addControl","ngOnDestroy","destroy$","next","complete","submitForm","isSubmitting","observable","login","value","register","pipe","subscribe","navigate","error","err","selectors","standalone","features","decls","vars","consts","template","ctx","encapsulation"],"sourceRoot":"","sources":["C:\\Progetti\\Test\\angular-realworld-example-app-docker\\src\\app\\core\\auth\\auth.component.ts","C:\\Progetti\\Test\\angular-realworld-example-app-docker\\src\\app\\core\\auth\\auth.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport {\r\n  Validators,\r\n  FormGroup,\r\n  FormControl,\r\n  ReactiveFormsModule,\r\n} from \"@angular/forms\";\r\nimport { ActivatedRoute, Router, RouterLink } from \"@angular/router\";\r\nimport { NgIf } from \"@angular/common\";\r\nimport { ListErrorsComponent } from \"../../shared/list-errors.component\";\r\nimport { Errors } from \"../models/errors.model\";\r\nimport { UserService } from \"../services/user.service\";\r\nimport { takeUntil } from \"rxjs/operators\";\r\nimport { Subject } from \"rxjs\";\r\n\r\ninterface AuthForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n  username?: FormControl<string>;\r\n}\r\n\r\n@Component({\r\n  selector: \"app-auth-page\",\r\n  templateUrl: \"./auth.component.html\",\r\n  imports: [RouterLink, NgIf, ListErrorsComponent, ReactiveFormsModule],\r\n  standalone: true,\r\n})\r\nexport class AuthComponent implements OnInit, OnDestroy {\r\n  authType = \"\";\r\n  title = \"\";\r\n  errors: Errors = { errors: {} };\r\n  isSubmitting = false;\r\n  authForm: FormGroup<AuthForm>;\r\n  destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private readonly route: ActivatedRoute,\r\n    private readonly router: Router,\r\n    private readonly userService: UserService\r\n  ) {\r\n    // use FormBuilder to create a form group\r\n    this.authForm = new FormGroup<AuthForm>({\r\n      email: new FormControl(\"\", {\r\n        validators: [Validators.required],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl(\"\", {\r\n        validators: [Validators.required],\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.authType = this.route.snapshot.url.at(-1)!.path;\r\n    this.title = this.authType === \"login\" ? \"Sign in\" : \"Sign up\";\r\n    if (this.authType === \"register\") {\r\n      this.authForm.addControl(\r\n        \"username\",\r\n        new FormControl(\"\", {\r\n          validators: [Validators.required],\r\n          nonNullable: true,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  submitForm(): void {\r\n    this.isSubmitting = true;\r\n    this.errors = { errors: {} };\r\n\r\n    let observable =\r\n      this.authType === \"login\"\r\n        ? this.userService.login(\r\n            this.authForm.value as { email: string; password: string }\r\n          )\r\n        : this.userService.register(\r\n            this.authForm.value as {\r\n              email: string;\r\n              password: string;\r\n              username: string;\r\n            }\r\n          );\r\n\r\n    observable.pipe(takeUntil(this.destroy$)).subscribe({\r\n      next: () => void this.router.navigate([\"/\"]),\r\n      error: (err) => {\r\n        this.errors = err;\r\n        this.isSubmitting = false;\r\n      },\r\n    });\r\n  }\r\n}\r\n","<div class=\"auth-page\">\r\n  <div class=\"container page\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 offset-md-3 col-xs-12\">\r\n        <h1 class=\"text-xs-center\">{{ title }}</h1>\r\n        <p class=\"text-xs-center\">\r\n          <a *ngIf=\"authType === 'register'\" [routerLink]=\"['/login']\"\r\n            >Have an account?</a\r\n          >\r\n          <a *ngIf=\"authType === 'login'\" [routerLink]=\"['/register']\"\r\n            >Need an account?</a\r\n          >\r\n        </p>\r\n        <app-list-errors [errors]=\"errors\"></app-list-errors>\r\n        <form [formGroup]=\"authForm\" (ngSubmit)=\"submitForm()\">\r\n          <fieldset [disabled]=\"isSubmitting\">\r\n            <fieldset class=\"form-group\">\r\n              <input\r\n                *ngIf=\"authType === 'register'\"\r\n                formControlName=\"username\"\r\n                placeholder=\"Username\"\r\n                class=\"form-control form-control-lg\"\r\n                type=\"text\"\r\n              />\r\n            </fieldset>\r\n            <fieldset class=\"form-group\">\r\n              <input\r\n                formControlName=\"email\"\r\n                placeholder=\"Email\"\r\n                class=\"form-control form-control-lg\"\r\n                type=\"text\"\r\n              />\r\n            </fieldset>\r\n            <fieldset class=\"form-group\">\r\n              <input\r\n                formControlName=\"password\"\r\n                placeholder=\"Password\"\r\n                class=\"form-control form-control-lg\"\r\n                type=\"password\"\r\n              />\r\n            </fieldset>\r\n            <button\r\n              class=\"btn btn-lg btn-primary pull-xs-right\"\r\n              [disabled]=\"!authForm.valid\"\r\n              type=\"submit\"\r\n            >\r\n              {{ title }}\r\n            </button>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}